AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Schematic Story Complete API with Image Upload System

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    Layers:
      - !Ref DependenciesLayer
    Environment:
      Variables:
        TABLE_NAME:
          Ref: DynamoDBTableName
        S3_BUCKET_NAME:
          Ref: S3BucketName
        S3_IMAGES_BUCKET_NAME:
          Ref: S3ImageBucketName
        CLOUDFRONT_IMAGES_DOMAIN:
          Fn::GetAtt: [ImagesCloudFrontDistribution, DomainName]
        ENVIRONMENT:
          Ref: Environment
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        MAX_IMAGE_SIZE_MB: 10
    Tracing: Active

Parameters:
  DynamoDBTableName:
    Type: String
    Default: SchematicStoryTable
    Description: Name of the existing DynamoDB table
  S3BucketName:
    Type: String
    Default: schematic-story-files
    Description: Name of the S3 bucket for schematic files
  S3ImageBucketName:
    Type: String
    Default: schematic-story-images
    Description: Name of the S3 bucket for images
  ApiCustomDomainName:
    Type: String
    Default: api.schematicstory.com
  ApiCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:868651351479:certificate/bc0a6d16-e21c-4369-babb-9ad289021e74
    Description: Certificate ARN for API Gateway
  SharpLayerArn:
    Type: String
    Default: arn:aws:lambda:us-east-2:868651351479:layer:sharp:1
    Description: ARN of the Sharp layer
  Environment:
    Type: String
    Default: development
    AllowedValues:
    - development
    - staging
    - production
    Description: Environment name

Resources:
#==================================================================================================
# S3 BUCKETS
#==================================================================================================
  SchematicsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - 'https://schematicstory.com'
              - 'http://localhost:5173'
            AllowedHeaders: ['*']
            AllowedMethods: [POST, PUT, HEAD]
            MaxAge: 300
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3ImageBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - 'https://schematicstory.com'
              - 'http://localhost:5173'
            AllowedHeaders: ['*']
            AllowedMethods: [POST, PUT, HEAD]
            MaxAge: 300
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          # Intelligent Tiering for cost optimization
          - Id: IntelligentTiering
            Status: Enabled
            Prefix: gallery/
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER


#==================================================================================================
# CLOUDFRONT DISTRIBUTIONS
#==================================================================================================
  SchematicsCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: "Schematic Story - Schematics CDN"
        Origins:
          - DomainName: !GetAtt SchematicsBucket.RegionalDomainName
            Id: SchematicsS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${SchematicsCloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: SchematicsS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled (for JSON files)
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
        PriceClass: PriceClass_100

  ImagesCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: "Schematic Story - Images CDN"
        Origins:
          - DomainName: !GetAtt ImagesBucket.RegionalDomainName
            Id: ImagesS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${ImagesCloudFrontOriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: ImagesS3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized (good for images)
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          Compress: true
        # Custom cache behaviors for different image types
        CacheBehaviors:
          # Thumbnails - cache longer
          - PathPattern: "*_thumb.*"
            TargetOriginId: ImagesS3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            Compress: true
          # Avatars - cache moderately
          - PathPattern: "avatars/*"
            TargetOriginId: ImagesS3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
            Compress: true
        PriceClass: PriceClass_100

  # Origin Access Identities
  SchematicsCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for Schematic Story - Schematics"

  ImagesCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for Schematic Story - Images"

  # S3 Bucket Policies
  SchematicsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SchematicsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${SchematicsCloudFrontOriginAccessIdentity}"
            Action: s3:GetObject
            Resource: !Sub "${SchematicsBucket.Arn}/*"

  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${ImagesCloudFrontOriginAccessIdentity}"
            Action: s3:GetObject
            Resource: !Sub "${ImagesBucket.Arn}/*"

#==================================================================================================
# REST API
#==================================================================================================
  SchematicStoryApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuth
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization   # expects Bearer <JWT>

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiCustomDomainName
      EndpointConfiguration:
        Types: [EDGE]
      CertificateArn: !Ref ApiCertificateArn
      SecurityPolicy: TLS_1_2

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref SchematicStoryApi
      Stage: Prod

#==================================================================================================
# COGNITO AUTHENTICATION
#==================================================================================================
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: picture
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt CognitoPostConfirmationFunction.Arn
        PreSignUp: !GetAtt CognitoPreSignUpFunction.Arn
        CustomMessage: !GetAtt CognitoCustomMessageFunction.Arn
        PreTokenGeneration: !GetAtt CognitoPreTokenGenerationFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
        - 'profile'
      CallbackURLs:
        - 'http://localhost:3000/auth/welcome'
        - 'https://schematicstory.com/auth/welcome'
      LogoutURLs:
        - 'http://localhost:3000'
        - 'https://schematicstory.com'
      SupportedIdentityProviders:
        - 'COGNITO'

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: auth.schematicstory.com
      UserPoolId: !Ref CognitoUserPool
      CustomDomainConfig:
        CertificateArn: arn:aws:acm:us-east-1:868651351479:certificate/8052dcf4-d13e-44eb-a5c8-6344c18d72d3

#==================================================================================================
# LAMBDA LAYERS
#==================================================================================================
  SharpLambdaLayer:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:987481058235:applications/nodejs-sharp-lambda-layer
        SemanticVersion: 0.34.1
      TimeoutInMinutes: 5

  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sharp-layer
      ContentUri: layers/sharp-layer/
      CompatibleRuntimes:
        - nodejs22.x
      CompatibleArchitectures:
        - x86_64
  
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-dependencies-layer
      Description: Shared Node.js dependencies including uuid, AWS SDK, etc.
      ContentUri: layers/dependencies-layer/
      CompatibleRuntimes:
        - nodejs18.x
        - nodejs20.x
        - nodejs22.x
      CompatibleArchitectures:
        - x86_64

#==================================================================================================
# SHARP TEST
#==================================================================================================
  # Add this function to your template.yaml
  TestSharpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/testHandlers.testSharp
      Layers:
        - !Ref SharpLayer  # or your Sharp layer ARN
      Events:
        TestSharp:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /test/sharp
            Method: GET
            Auth:
              Authorizer: NONE  # No auth needed for testing

#==================================================================================================
# IMAGE UPLOAD FUNCTIONS
#==================================================================================================
  GetImageUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.getImageUploadUrl
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3ImageBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        GetImageUploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /images/upload-url
            Method: POST

  ConfirmImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.confirmImageUpload
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        ConfirmImageUpload:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /images/{imageId}/confirm-upload
            Method: POST

  ProcessImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.processImageUpload
      Timeout: 60
      MemorySize: 1024
      Layers:
        - !Ref SharpLayer
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3ImageBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName

  GetSchematicImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.getSchematicImages
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        GetSchematicImages:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/images
            Method: GET
            Auth:
              Authorizer: NONE

  SetCoverImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.setCoverImage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        SetCoverImage:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/cover-image
            Method: POST

  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.deleteImage
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref S3ImageBucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        DeleteImage:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /images/{imageId}
            Method: DELETE

  GetUserAvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.getUserAvatar
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        GetUserAvatar:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/avatar
            Method: GET
            Auth:
              Authorizer: NONE

  UpdateUserAvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/imageHandlers.updateUserAvatar
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        UpdateUserAvatar:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/avatar
            Method: POST

#==================================================================================================
# ENHANCED SCHEMATIC FUNCTIONS
#==================================================================================================
  ProcessSchematicUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.processSchematicUpload
      Timeout: 30
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref S3BucketName
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName

  ConfirmSchematicUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.confirmSchematicUpload
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTableName
      Events:
        ConfirmSchematicUpload:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/confirm-upload
            Method: POST

#==================================================================================================
# S3 PERMISSIONS FOR LAMBDA FUNCTIONS
#==================================================================================================
  ProcessSchematicUploadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessSchematicUploadFunction.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub "${SchematicsBucket.Arn}/*"

  ProcessImageUploadPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessImageUploadFunction.Arn
      Principal: s3.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub "${ImagesBucket.Arn}/*"

#==================================================================================================
# EXISTING USER ENDPOINTS
#==================================================================================================
  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/userHandlers.getUser
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}
            Method: GET
            Auth:
              Authorizer: NONE

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/userHandlers.createUser
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users
            Method: POST

  GetUserSchematicsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/userHandlers.getUserSchematics
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetUserSchematics:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/schematics
            Method: GET
            Auth:
              Authorizer: NONE

#==================================================================================================
# EXISTING SCHEMATIC ENDPOINTS
#==================================================================================================
  GetSchematicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.getSchematic
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetSchematic:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}
            Method: GET
            Auth:
              Authorizer: NONE

  CreateSchematicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.createSchematic
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        CreateSchematic:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics
            Method: POST

  UpdateSchematicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.updateSchematic
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        UpdateSchematic:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}
            Method: PUT

  DeleteSchematicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.deleteSchematic
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        DeleteSchematic:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}
            Method: DELETE

  GetLatestSchematicsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.getLatestSchematics
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetLatestSchematics:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/feed/latest
            Method: GET
            Auth:
              Authorizer: NONE

  GetSchematicsByTagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.getSchematicsByTag
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetSchematicsByTag:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/tag/{tagName}
            Method: GET
            Auth:
              Authorizer: NONE

  GetSchematicDownloadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.getSchematicDownloadUrl
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      - S3ReadPolicy:
          BucketName:
            Ref: S3BucketName
      Events:
        GetDownloadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/download-url
            Method: GET
            Auth:
              Authorizer: NONE

  GetSchematicUploadUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/schematicHandlers.getSchematicUploadUrl
      Policies:
      - S3WritePolicy:
          BucketName:
            Ref: S3BucketName
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetUploadUrl:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/upload-url
            Method: POST

#==================================================================================================
# EXISTING COMMENT ENDPOINTS
#==================================================================================================
  GetCommentsBySchematicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/commentHandlers.getCommentsBySchematic
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetComments:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/comments
            Method: GET
            Auth:
              Authorizer: NONE

  CreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/commentHandlers.createComment
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        CreateComment:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /schematics/{schematicId}/comments
            Method: POST

  UpdateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/commentHandlers.updateComment
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        UpdateComment:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /comments/{commentId}
            Method: PUT

  DeleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/commentHandlers.deleteComment
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        DeleteComment:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /comments/{commentId}
            Method: DELETE

#==================================================================================================
# EXISTING FOLLOW ENDPOINTS
#==================================================================================================
  FollowUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/followHandlers.followUser
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        FollowUser:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/follow
            Method: POST

  UnfollowUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/followHandlers.unfollowUser
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        UnfollowUser:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/follow
            Method: DELETE

  GetUserFollowersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/followHandlers.getUserFollowers
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetFollowers:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/followers
            Method: GET

  GetUserFollowingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/followHandlers.getUserFollowing
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetFollowing:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/following
            Method: GET

#==================================================================================================
# EXISTING NOTIFICATION ENDPOINTS
#==================================================================================================
  GetUserNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/notificationHandlers.getUserNotifications
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        GetNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/notifications
            Method: GET

  MarkNotificationReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/notificationHandlers.markNotificationRead
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        MarkRead:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /notifications/{notificationId}/read
            Method: PUT

  MarkAllNotificationsReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/notificationHandlers.markAllNotificationsRead
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName
      Events:
        MarkAllRead:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /users/{userId}/notifications/read-all
            Method: PUT

#==================================================================================================
# HEALTH CHECK
#==================================================================================================
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/healthHandler.health
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref SchematicStoryApi
            Path: /health
            Method: GET
            Auth:
              Authorizer: NONE

#==================================================================================================
# COGNITO TRIGGERS
#==================================================================================================
  CognitoPostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/cognitoTriggers.postConfirmation
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DynamoDBTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTableName

  CognitoPreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/cognitoTriggers.preSignUp
      Environment:
        Variables:
          TABLE_NAME:
            Ref: DynamoDBTableName
          TRUSTED_DOMAINS: ''
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: DynamoDBTableName

  CognitoCustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/cognitoTriggers.customMessage

  CognitoPreTokenGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: handlers/cognitoTriggers.preTokenGeneration

  # Cognito Lambda Permissions
  CognitoPostConfirmationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoPostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt CognitoUserPool.Arn

  CognitoPreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoPreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt CognitoUserPool.Arn

  CognitoCustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoCustomMessageFunction.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt CognitoUserPool.Arn

  CognitoPreTokenGenerationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CognitoPreTokenGenerationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt CognitoUserPool.Arn

Outputs:
  # Authentication Outputs
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  CognitoHostedDomain:
    Description: Cognito Hosted UI domain
    Value: auth.schematicstory.com
    Export:
      Name: !Sub ${AWS::StackName}-CognitoHostedDomain

  # API Outputs
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub https://${SchematicStoryApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl

  ApiCustomDomain:
    Description: Custom domain for API Gateway
    Value: !Sub https://${ApiCustomDomainName}/
    Export:
      Name: !Sub ${AWS::StackName}-ApiCustomDomain

  ApiGatewayDnsTarget:
    Description: Target you should CNAME to in Cloudflare
    Value: !GetAtt ApiGatewayCustomDomain.DistributionDomainName
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayDnsTarget

  # Storage Outputs
  S3BucketName:
    Description: S3 bucket for schematic files
    Value: !Ref S3BucketName
    Export:
      Name: !Sub ${AWS::StackName}-S3BucketName

  S3ImagesBucketName:
    Description: S3 bucket for image files
    Value: !Ref S3ImageBucketName
    Export:
      Name: !Sub ${AWS::StackName}-S3ImagesBucketName

  # CDN Outputs
  SchematicsCloudFrontDomain:
    Description: CloudFront domain for schematics
    Value: !GetAtt SchematicsCloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-SchematicsCloudFrontDomain

  ImagesCloudFrontDomain:
    Description: CloudFront domain for images
    Value: !GetAtt ImagesCloudFrontDistribution.DomainName
    Export:
      Name: !Sub ${AWS::StackName}-ImagesCloudFrontDomain

  # Lambda Function ARNs
  CognitoPostConfirmationFunctionArn:
    Description: ARN of the Post Confirmation Lambda function
    Value: !GetAtt CognitoPostConfirmationFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PostConfirmationArn

  CognitoPreSignUpFunctionArn:
    Description: ARN of the Pre Sign-up Lambda function
    Value: !GetAtt CognitoPreSignUpFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PreSignUpArn

  ProcessImageUploadFunctionArn:
    Description: ARN of the Image Processing Lambda function
    Value: !GetAtt ProcessImageUploadFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ProcessImageUploadArn

  ProcessSchematicUploadFunctionArn:
    Description: ARN of the Schematic Processing Lambda function
    Value: !GetAtt ProcessSchematicUploadFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ProcessSchematicUploadArn